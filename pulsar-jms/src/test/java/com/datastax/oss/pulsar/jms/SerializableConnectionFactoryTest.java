/*
 * Copyright DataStax, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.datastax.oss.pulsar.jms;

import static org.junit.jupiter.api.Assertions.assertEquals;

import com.datastax.oss.pulsar.jms.utils.PulsarCluster;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.nio.file.Path;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.MessageConsumer;
import javax.jms.MessageProducer;
import javax.jms.Queue;
import javax.jms.Session;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;

@Slf4j
public class SerializableConnectionFactoryTest {
  @TempDir public static Path tempDir;
  private static PulsarCluster cluster;

  // Generated by running "cat src/test/resources/broker.truststore | base64"
  private final String truststore = "base64:MIIEIgIBAzCCA8wGCSqGSIb3DQEHAaCCA70EggO5MIIDtTCCA7EGCSqGSIb3DQEHBqCCA6IwggOeAgEAMIIDlwYJKoZIhvcNAQcBMGYGCSqGSIb3DQEFDTBZMDgGCSqGSIb3DQEFDDArBBS4gd5TzYivdhJkcSa/oWsvaqrGAQICJxACASAwDAYIKoZIhvcNAgkFADAdBglghkgBZQMEASoEEMiUvfQ2emhbGcJMz7jyYG+AggMg4MAOtjHODvK97n59UPzIvG8UQqJbihp3+ATSHDPJiOG+8lWOQq8RV4WROiSjj8cnvDj0rsBemOBd+ghTV5R5VgGOLVct7saY3aG82zw7vDKp6Fq/doA6GahrxF7bjUhmQ4TeWNDj5YXlBeohYyxnF7X2PQB0R49qhyqjlihhnAtHe8FNkS9jp1UWew8qEQtcwNhCSi7r8j7pPxeZo8RB7Q5SzO/hoWnxao+MZlW2TRxxhhOW69qeT9y9QOul197QeZ+ydtcsdH4m12qfYbACoJOD+MAyD3+xdCmpx1KO3vj3cmRdeH3Fhn7NJ4ZYG8561BpcYWnAUMYpebs7t1ybh7fdfDsg00Is1HHA3kVwYKz0XaL4bJYP7Dwg1dsWaVcNXjnr0nA9psJxvni5gaArPrbSu70w2i/hWHive9BntPHfdFkgcDb+xtF1kPmvTu18+bzf38EbdpzTuLPFj7qajb3dM10j5DkKn3nz1X3PZUv7g5qSrrX2QjUiP27Llq05er9xe/IIvBhoe7GFw+LybRLP1QRL6K7wbTlHeqxkmtWbrLzohtS9zgCQGhm2leTmDJ0wNZVa8bM6bpqan29xqazVkPPpgqtehyaDyAqajCGilBq6D5P5oHaplwrXCrX6E/IpScBrpe8ivF4Z1RgFEUDBC0Bg2bI60y+0PK48mE0Mmv25ri3fBKlYOultwVhK9gEL4wS0FE4f0US7njUuD60e8kua6hn+i9vu04djiLQ0WJNglnz+I/6I7yfgy0Y0Bk+dRn4oRyI/XVn2d18azYA0FDB5xvCCsJvYNTphT7hwasGmmYHtdaLBIdRty9jhSaHIPtsfwzc6dAHR3Qv1h/HRpLMSWaa3tCKL/SUVr1PxyVNU1UG8lQ30nRLC+pD28HvJ1pkkJqcsZDj2jM2Go7xgrxSeXI/gelieMpI67XWG4kqRDmCX07RA04mP7ei9lEgHA7PzZWMICJXUzT4sX5NegICwLTUs1sQcaKvw5MhpU4U8+3iJl9VNIgbCJ304GQTMkq4I2/xpyJvCybVmNBng3gYrXQNjaLYlaKgMBG8wTTAxMA0GCWCGSAFlAwQCAQUABCAby54UP7+GZ0PnfpouQepMExWhZlNVP7PgBFaSrDoe+wQUIZdbGrtkqgZNbQepoKJTSyAo8EQCAicQ";
  // Generated by running "cat src/test/resources/ca.pem | base64"
  private final String trustCert = "base64:LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNwRENDQVl3Q0NRRGJQZ1NuVU9SbVVEQU5CZ2txaGtpRzl3MEJBUXNGQURBVU1SSXdFQVlEVlFRRERBbHMKYjJOaGJHaHZjM1F3SGhjTk1qSXhNREkxTWpFMU9URXpXaGNOTWpVd09ERTBNakUxT1RFeldqQVVNUkl3RUFZRApWUVFEREFsc2IyTmhiR2h2YzNRd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUMxCnhXazFKRzdoT3lNa0NMMnFKRENINXBMYnNRWUc1SWZKUndRcnNCYi9mYlVaRy9pWFQ0eUtacXNRQjdMcU5RQm4KVUsxV29PSDFCejFlTEVvZFJSdDhQWjI5MjUzbUdEYlRlRUJEcXdjbXZIOW15N3NodTl6VkgxU1E4Mmp4ZlhKSQoxK0VMRThkSTZYdVhFNGl2ODZiN2R1RFJKcDBEY0lCNkRoT3VsTGdlMHFWNFl0emxmbXZTWlZwV002SVFQMFBECm5kQU0xQXpzbkRIQ00zMU43SDFHdkUzYy92aEtHQ1hLbjJQYTlWUmlveU45ZnA5bFFhYXFoZnluUUJsS1A4WGkKdkFzU3FTOS9jYzZyMWRPS3BNcUxZb0d3VllPekwzVStJMUVDaWlSbFc3S3hnQnJyUVRkYytHMTg2OG1saDNINApONmR3Wld4a29Rdlh5TXZ4NEpFREFnTUJBQUV3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUtydm0vOVZ3KzdHCmF4V0hYb25EWXFGL1NpbE1ERzh3V2RSYUVyUkNkQWU2TGhpRWt1QVhiMW9NUHQyQmFUWkFvLzF6K2NsdURnMjUKNEk2MDFSMjhhWERabi9VTENDOFZGRlFEMWVyS0pPVDJvUk5DMHZsckNERjFnV2RNUlhwU0NpaVlNUmxTMmVvWApKMmtKem9mWEdITlNzUzRZMDVJWllxQVYyS0szeHJjQlhRR3NvNmpRZlZhZzFWckZBNm9XdStxcWR5SjFXeUJRCmduYTArcGNtU3pBMUJ3MnF5UFMyK2VKblU0d3NmcTVLejUxMWorcnorUDU2ZlRPTmNzWEYvaEdWcHk1cFRvYTMKY1lNTHRCYmRCcGFNbXBTcmV5S3d3bXhpdHBpc3lWMldneDdmNGhMdVp6dHozTVVWNk1UbW1yUVI5enNiTElqbwpxY1hEM1FxVEhOZz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=";

  @BeforeAll
  public static void before() throws Exception {
    // Use TLS for this test
    String keystore = SerializableConnectionFactoryTest.class.getClassLoader().getResource("broker.keystore").getPath();
    String truststore = SerializableConnectionFactoryTest.class.getClassLoader().getResource("broker.truststore").getPath();

    cluster =
        new PulsarCluster(tempDir, (config) -> {
          config.setTransactionCoordinatorEnabled(false);
          config.setBrokerServicePortTls(Optional.of(6651));
          config.setWebServicePortTls(Optional.of(8443));
          config.setTlsKeyStore(keystore);
          config.setTlsKeyStorePassword("password");
          config.setTlsTrustStore(truststore);
          config.setTlsTrustStorePassword("password");
          config.setTlsEnabledWithKeyStore(true);
        });
    cluster.start();
  }

  @AfterAll
  public static void after() throws Exception {
    if (cluster != null) {
      cluster.close();
    }
  }

  @Test
  public void testWithBase64EncodedTrustStore() throws Exception {
    Map<String, Object> properties = new HashMap<>();
    properties.put("webServiceUrl", cluster.getAddressTls());
    properties.put("useKeyStoreTls", "true");
    properties.put("tlsTrustStorePath", truststore);
    properties.put("tlsTrustStorePassword", "password");
    properties.put("tlsEnableHostnameVerification", "true");
    test("testWithBase64EncodedTrustStore", properties);
  }

  @Test
  public void testWithBase64EncodedTrustCert() throws Exception {
    Map<String, Object> properties = new HashMap<>();
    properties.put("webServiceUrl", cluster.getAddressTls());
    properties.put("tlsTrustCertsFilePath", trustCert);
    properties.put("tlsEnableHostnameVerification", "true");
    test("testWithBase64EncodedTrustStore", properties);
  }

  @Test
  public void testWithClasspathTrustStore() throws Exception {
    Map<String, Object> properties = new HashMap<>();
    properties.put("webServiceUrl", cluster.getAddressTls());
    properties.put("useKeyStoreTls", "true");
    properties.put("tlsTrustStorePath", "classpath:broker.truststore");
    properties.put("tlsTrustStorePassword", "password");
    properties.put("tlsEnableHostnameVerification", "true");
    test("testWithClasspathTrustStore", properties);
  }

  @Test
  public void testWithClasspathTrustCert() throws Exception {
    Map<String, Object> properties = new HashMap<>();
    properties.put("webServiceUrl", cluster.getAddressTls());
    properties.put("tlsTrustCertsFilePath", "classpath:ca.pem");
    properties.put("tlsEnableHostnameVerification", "true");
    test("testWithClasspathTrustCerts", properties);
  }

  public void test(String prefix, Map<String, Object> properties) throws Exception {
    try (PulsarConnectionFactory factory1 = new PulsarConnectionFactory(properties);
        PulsarConnectionFactory factory2 = new PulsarConnectionFactory(properties); ) {

      ConnectionFactory[] array = new ConnectionFactory[] {factory1, factory2};

      try (Connection connection1 = factory1.createConnection();
          Connection connection2 = factory2.createConnection();
          Session session1 = connection1.createSession(Session.AUTO_ACKNOWLEDGE);
          Session session2 = connection2.createSession(Session.AUTO_ACKNOWLEDGE)) {

        // use the factories, to produce and consume
        Queue queue = session1.createQueue(prefix + "-test");

        Queue queue2 = session1.createQueue(prefix + "-test2");

        session1.createProducer(queue).send(session1.createTextMessage("foo0"));
        session1.createProducer(queue).send(session1.createTextMessage("foo1"));
        session1.createProducer(queue).send(session1.createTextMessage("foo2"));

        try (MessageConsumer consumer = session2.createConsumer(queue)) {
          connection2.start();
          assertEquals("foo0", consumer.receive().getBody(String.class));
        }

        // serialise
        byte[] serialised = serializeObject(array);

        // deserialize
        ConnectionFactory[] array2 = (ConnectionFactory[]) deserializeObject(serialised);

        // verify that the connections work
        int i = 1;

        assertEquals(2, array2.length);
        for (int j = 0; i < array2.length; j++) {
          ConnectionFactory factory = array2[j];
          try (Connection con = factory.createConnection();
              Session session = con.createSession(Session.AUTO_ACKNOWLEDGE);
              MessageConsumer consumer = session.createConsumer(queue); ) {
            con.start();

            // consume from previously created Queue
            assertEquals("foo" + i, consumer.receive().getBody(String.class));
            i++;

            // use the Pulsar Producer
            try (MessageProducer producer = session.createProducer(queue2); ) {
              producer.send(session.createTextMessage("bar"));
            }

            // use Pulsar Consumer
            try (MessageConsumer consumer2 = session.createConsumer(queue2); ) {
              assertEquals("bar", consumer2.receive().getBody(String.class));
            }
          }

          // dispose
          ((PulsarConnectionFactory) factory).close();
        }
      }
    }
  }

  private static Object deserializeObject(byte[] serialised) throws Exception {
    try (ByteArrayInputStream in = new ByteArrayInputStream(serialised);
        ObjectInputStream ii = new ObjectInputStream(in)) {
      return ii.readObject();
    }
  }

  private static byte[] serializeObject(Object object) throws Exception {
    byte[] serialised;
    try (ByteArrayOutputStream out = new ByteArrayOutputStream();
        ObjectOutputStream oo = new ObjectOutputStream(out); ) {
      oo.writeObject(object);
      oo.flush();
      serialised = out.toByteArray();
    }
    return serialised;
  }
}
